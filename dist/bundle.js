/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__lib_state__ = __webpack_require__(3);\n\n\nconst initialState = {\n    todos: [{\n        id: 0,\n        text: 'Take a look at the application',\n        done: true\n    }, {\n        id: 1,\n        text: 'Add ability to filter todos',\n        done: false\n    }, {\n        id: 2,\n        text: 'Filter todos by status',\n        done: false\n    }, {\n        id: 3,\n        text: 'Filter todos by text',\n        done: false\n    }]\n\n};\n\nfunction todoChangeHandler(state, change) {\n    switch (change.type) {\n        case 'ADD_TODO':\n            state.todos.push({\n                id: state.todos.length,\n                text: change.text,\n                done: false\n            });\n            sessionStorage.setItem('todos', JSON.stringify(state.todos));\n            break;\n        case 'TODO_TOGGLE_DONE':\n            for (let todo of state.todos) {\n                if (todo.id === change.id) {\n                    todo.done = !todo.done;\n                    break;\n                }\n            }\n            break;\n        case 'ADD_FILTER':\n            const tempState = {};\n            Object.assign(tempState, initialState);\n            tempState.CheckedFilter = change.text;\n            if (change.text !== 'showAll') {\n                const changeFilter = change.text === 'showOpen' ? false : true;\n                tempState.todos = tempState.todos.filter(item => {\n                    return item.done === changeFilter;\n                });\n            }\n            return tempState;\n            break;\n    }\n}\n\nconst todos = Object(__WEBPACK_IMPORTED_MODULE_0__lib_state__[\"a\" /* createStore */])(todoChangeHandler, initialState);\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = todos;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvc3RhdGUuanM/NDBhYiJdLCJuYW1lcyI6WyJpbml0aWFsU3RhdGUiLCJ0b2RvcyIsImlkIiwidGV4dCIsImRvbmUiLCJ0b2RvQ2hhbmdlSGFuZGxlciIsInN0YXRlIiwiY2hhbmdlIiwidHlwZSIsInB1c2giLCJsZW5ndGgiLCJzZXNzaW9uU3RvcmFnZSIsInNldEl0ZW0iLCJKU09OIiwic3RyaW5naWZ5IiwidG9kbyIsInRlbXBTdGF0ZSIsIk9iamVjdCIsImFzc2lnbiIsIkNoZWNrZWRGaWx0ZXIiLCJjaGFuZ2VGaWx0ZXIiLCJmaWx0ZXIiLCJpdGVtIiwiY3JlYXRlU3RvcmUiXSwibWFwcGluZ3MiOiI7QUFBQTs7QUFFQSxNQUFNQSxlQUFlO0FBQ2pCQyxXQUFPLENBQ0g7QUFDSUMsWUFBSSxDQURSO0FBRUlDLGNBQU0sZ0NBRlY7QUFHSUMsY0FBTTtBQUhWLEtBREcsRUFNSDtBQUNJRixZQUFJLENBRFI7QUFFSUMsY0FBTSw2QkFGVjtBQUdJQyxjQUFNO0FBSFYsS0FORyxFQVdIO0FBQ0lGLFlBQUksQ0FEUjtBQUVJQyxjQUFNLHdCQUZWO0FBR0lDLGNBQU07QUFIVixLQVhHLEVBZ0JIO0FBQ0lGLFlBQUksQ0FEUjtBQUVJQyxjQUFNLHNCQUZWO0FBR0lDLGNBQU07QUFIVixLQWhCRzs7QUFEVSxDQUFyQjs7QUEwQkEsU0FBU0MsaUJBQVQsQ0FBMkJDLEtBQTNCLEVBQWtDQyxNQUFsQyxFQUEwQztBQUN0QyxZQUFPQSxPQUFPQyxJQUFkO0FBQ0ksYUFBSyxVQUFMO0FBQ0lGLGtCQUFNTCxLQUFOLENBQVlRLElBQVosQ0FBaUI7QUFDYlAsb0JBQUlJLE1BQU1MLEtBQU4sQ0FBWVMsTUFESDtBQUViUCxzQkFBTUksT0FBT0osSUFGQTtBQUdiQyxzQkFBTTtBQUhPLGFBQWpCO0FBS0FPLDJCQUFlQyxPQUFmLENBQXVCLE9BQXZCLEVBQWdDQyxLQUFLQyxTQUFMLENBQWVSLE1BQU1MLEtBQXJCLENBQWhDO0FBQ0E7QUFDSixhQUFLLGtCQUFMO0FBQ0ksaUJBQUksSUFBSWMsSUFBUixJQUFnQlQsTUFBTUwsS0FBdEIsRUFBNkI7QUFDekIsb0JBQUdjLEtBQUtiLEVBQUwsS0FBWUssT0FBT0wsRUFBdEIsRUFBMEI7QUFDdEJhLHlCQUFLWCxJQUFMLEdBQVksQ0FBQ1csS0FBS1gsSUFBbEI7QUFDQTtBQUNIO0FBQ0o7QUFDRDtBQUNKLGFBQUssWUFBTDtBQUNNLGtCQUFNWSxZQUFZLEVBQWxCO0FBQ0FDLG1CQUFPQyxNQUFQLENBQWNGLFNBQWQsRUFBd0JoQixZQUF4QjtBQUNBZ0Isc0JBQVVHLGFBQVYsR0FBMEJaLE9BQU9KLElBQWpDO0FBQ0EsZ0JBQUdJLE9BQU9KLElBQVAsS0FBZSxTQUFsQixFQUE0QjtBQUMxQixzQkFBTWlCLGVBQWViLE9BQU9KLElBQVAsS0FBZSxVQUFmLEdBQTJCLEtBQTNCLEdBQW1DLElBQXhEO0FBQ0VhLDBCQUFVZixLQUFWLEdBQWtCZSxVQUFVZixLQUFWLENBQWdCb0IsTUFBaEIsQ0FBdUJDLFFBQVE7QUFDL0MsMkJBQU9BLEtBQUtsQixJQUFMLEtBQWNnQixZQUFyQjtBQUNGLGlCQUZrQixDQUFsQjtBQUdIO0FBQ0QsbUJBQU9KLFNBQVA7QUFDRjtBQTVCUjtBQThCSDs7QUFFTSxNQUFNZixRQUFRLHVFQUFBc0IsQ0FBWWxCLGlCQUFaLEVBQStCTCxZQUEvQixDQUFkLEMiLCJmaWxlIjoiMC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Y3JlYXRlU3RvcmV9IGZyb20gJy4vbGliL3N0YXRlJztcblxuY29uc3QgaW5pdGlhbFN0YXRlID0ge1xuICAgIHRvZG9zOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlkOiAwLFxuICAgICAgICAgICAgdGV4dDogJ1Rha2UgYSBsb29rIGF0IHRoZSBhcHBsaWNhdGlvbicsXG4gICAgICAgICAgICBkb25lOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlkOiAxLFxuICAgICAgICAgICAgdGV4dDogJ0FkZCBhYmlsaXR5IHRvIGZpbHRlciB0b2RvcycsXG4gICAgICAgICAgICBkb25lOiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBpZDogMixcbiAgICAgICAgICAgIHRleHQ6ICdGaWx0ZXIgdG9kb3MgYnkgc3RhdHVzJyxcbiAgICAgICAgICAgIGRvbmU6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlkOiAzLFxuICAgICAgICAgICAgdGV4dDogJ0ZpbHRlciB0b2RvcyBieSB0ZXh0JyxcbiAgICAgICAgICAgIGRvbmU6IGZhbHNlXG4gICAgICAgIH1cbiAgICBdXG5cbn07XG5cbmZ1bmN0aW9uIHRvZG9DaGFuZ2VIYW5kbGVyKHN0YXRlLCBjaGFuZ2UpIHtcbiAgICBzd2l0Y2goY2hhbmdlLnR5cGUpIHtcbiAgICAgICAgY2FzZSAnQUREX1RPRE8nOlxuICAgICAgICAgICAgc3RhdGUudG9kb3MucHVzaCh7XG4gICAgICAgICAgICAgICAgaWQ6IHN0YXRlLnRvZG9zLmxlbmd0aCxcbiAgICAgICAgICAgICAgICB0ZXh0OiBjaGFuZ2UudGV4dCxcbiAgICAgICAgICAgICAgICBkb25lOiBmYWxzZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKCd0b2RvcycsIEpTT04uc3RyaW5naWZ5KHN0YXRlLnRvZG9zKSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnVE9ET19UT0dHTEVfRE9ORSc6XG4gICAgICAgICAgICBmb3IobGV0IHRvZG8gb2Ygc3RhdGUudG9kb3MpIHtcbiAgICAgICAgICAgICAgICBpZih0b2RvLmlkID09PSBjaGFuZ2UuaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdG9kby5kb25lID0gIXRvZG8uZG9uZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ0FERF9GSUxURVInOlxuICAgICAgICAgICAgICBjb25zdCB0ZW1wU3RhdGUgPSB7fTtcbiAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih0ZW1wU3RhdGUsaW5pdGlhbFN0YXRlKTtcbiAgICAgICAgICAgICAgdGVtcFN0YXRlLkNoZWNrZWRGaWx0ZXIgPSBjaGFuZ2UudGV4dDsgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICBpZihjaGFuZ2UudGV4dCAhPT0nc2hvd0FsbCcpe1xuICAgICAgICAgICAgICAgIGNvbnN0IGNoYW5nZUZpbHRlciA9IGNoYW5nZS50ZXh0ID09PSdzaG93T3Blbic/IGZhbHNlIDogdHJ1ZTtcbiAgICAgICAgICAgICAgICAgIHRlbXBTdGF0ZS50b2RvcyA9IHRlbXBTdGF0ZS50b2Rvcy5maWx0ZXIoaXRlbSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpdGVtLmRvbmUgPT09IGNoYW5nZUZpbHRlcjtcbiAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIHRlbXBTdGF0ZTtcbiAgICAgICAgICAgIGJyZWFrOyAgICBcbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCB0b2RvcyA9IGNyZWF0ZVN0b3JlKHRvZG9DaGFuZ2VIYW5kbGVyLCBpbml0aWFsU3RhdGUpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL3N0YXRlLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__css_main_css__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__css_main_css___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__css_main_css__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__state__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__view__ = __webpack_require__(4);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__events__ = __webpack_require__(8);\n\n\n\n\n\n\n__WEBPACK_IMPORTED_MODULE_1__state__[\"a\" /* todos */].subscribe(newState => Object(__WEBPACK_IMPORTED_MODULE_2__view__[\"a\" /* render */])(document.body, newState));\n\nObject(__WEBPACK_IMPORTED_MODULE_2__view__[\"a\" /* render */])(document.body, __WEBPACK_IMPORTED_MODULE_1__state__[\"a\" /* todos */].getState());\nObject(__WEBPACK_IMPORTED_MODULE_3__events__[\"a\" /* registerEventHandlers */])();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvbWFpbi5qcz9jNDViIl0sIm5hbWVzIjpbInRvZG9zIiwic3Vic2NyaWJlIiwibmV3U3RhdGUiLCJyZW5kZXIiLCJkb2N1bWVudCIsImJvZHkiLCJnZXRTdGF0ZSIsInJlZ2lzdGVyRXZlbnRIYW5kbGVycyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBLHFEQUFBQSxDQUFNQyxTQUFOLENBQWdCQyxZQUFZLDZEQUFBQyxDQUFPQyxTQUFTQyxJQUFoQixFQUFzQkgsUUFBdEIsQ0FBNUI7O0FBRUEsNkRBQUFDLENBQU9DLFNBQVNDLElBQWhCLEVBQXNCLHFEQUFBTCxDQUFNTSxRQUFOLEVBQXRCO0FBQ0EsOEVBQUFDIiwiZmlsZSI6IjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJy4uL2Nzcy9tYWluLmNzcyc7XG5cbmltcG9ydCB7dG9kb3N9IGZyb20gJy4vc3RhdGUnO1xuaW1wb3J0IHtyZW5kZXJ9IGZyb20gJy4vdmlldyc7XG5pbXBvcnQge3JlZ2lzdGVyRXZlbnRIYW5kbGVyc30gZnJvbSAnLi9ldmVudHMnO1xuXG50b2Rvcy5zdWJzY3JpYmUobmV3U3RhdGUgPT4gcmVuZGVyKGRvY3VtZW50LmJvZHksIG5ld1N0YXRlKSk7XG5cbnJlbmRlcihkb2N1bWVudC5ib2R5LCB0b2Rvcy5nZXRTdGF0ZSgpKTtcbnJlZ2lzdGVyRXZlbnRIYW5kbGVycygpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL21haW4uanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

eval("// removed by extract-text-webpack-plugin\n    if(false) {\n      // 1506605208203\n      var cssReload = require(\"../../node_modules/css-hot-loader/hotModuleReplacement.js\")(module.id, {\"fileMap\":\"{fileName}\"});\n      module.hot.dispose(cssReload);\n      module.hot.accept(undefined, cssReload);\n    }\n  //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY3NzL21haW4uY3NzP2NkZTIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0EsdUdBQXVHLFlBQVksU0FBUyxFQUFFO0FBQzlIO0FBQ0E7QUFDQSIsImZpbGUiOiIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW5cbiAgICBpZihtb2R1bGUuaG90KSB7XG4gICAgICAvLyAxNTA2NjA1MjA4MjAzXG4gICAgICB2YXIgY3NzUmVsb2FkID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtaG90LWxvYWRlci9ob3RNb2R1bGVSZXBsYWNlbWVudC5qc1wiKShtb2R1bGUuaWQsIHtcImZpbGVNYXBcIjpcIntmaWxlTmFtZX1cIn0pO1xuICAgICAgbW9kdWxlLmhvdC5kaXNwb3NlKGNzc1JlbG9hZCk7XG4gICAgICBtb2R1bGUuaG90LmFjY2VwdCh1bmRlZmluZWQsIGNzc1JlbG9hZCk7XG4gICAgfVxuICBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jc3MvbWFpbi5jc3Ncbi8vIG1vZHVsZSBpZCA9IDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (immutable) */ __webpack_exports__[\"a\"] = createStore;\nfunction createStore(reducer, initial = {}) {\n    const listeners = [];\n    let state = initial;\n    if (sessionStorage.todos) {\n        state.todos = JSON.parse(sessionStorage.todos);\n    }\n    return {\n        dispatch(change) {\n            state = reducer(state, change) || state;\n            for (let listener of listeners) {\n                listener(state);\n            }\n        },\n\n        getState() {\n            return state;\n        },\n\n        subscribe(listener) {\n            listeners.push(listener);\n        }\n    };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvbGliL3N0YXRlLmpzPzdiOWUiXSwibmFtZXMiOlsiY3JlYXRlU3RvcmUiLCJyZWR1Y2VyIiwiaW5pdGlhbCIsImxpc3RlbmVycyIsInN0YXRlIiwic2Vzc2lvblN0b3JhZ2UiLCJ0b2RvcyIsIkpTT04iLCJwYXJzZSIsImRpc3BhdGNoIiwiY2hhbmdlIiwibGlzdGVuZXIiLCJnZXRTdGF0ZSIsInN1YnNjcmliZSIsInB1c2giXSwibWFwcGluZ3MiOiI7QUFBTyxTQUFTQSxXQUFULENBQXFCQyxPQUFyQixFQUE4QkMsVUFBVSxFQUF4QyxFQUE0QztBQUMvQyxVQUFNQyxZQUFZLEVBQWxCO0FBQ0EsUUFBSUMsUUFBUUYsT0FBWjtBQUNBLFFBQUdHLGVBQWVDLEtBQWxCLEVBQXdCO0FBQ3BCRixjQUFNRSxLQUFOLEdBQWNDLEtBQUtDLEtBQUwsQ0FBV0gsZUFBZUMsS0FBMUIsQ0FBZDtBQUNIO0FBQ0QsV0FBTztBQUNIRyxpQkFBU0MsTUFBVCxFQUFpQjtBQUNiTixvQkFBUUgsUUFBUUcsS0FBUixFQUFlTSxNQUFmLEtBQTBCTixLQUFsQztBQUNBLGlCQUFJLElBQUlPLFFBQVIsSUFBb0JSLFNBQXBCLEVBQStCO0FBQzNCUSx5QkFBU1AsS0FBVDtBQUNIO0FBQ0osU0FORTs7QUFRSFEsbUJBQVc7QUFDUCxtQkFBT1IsS0FBUDtBQUNILFNBVkU7O0FBWUhTLGtCQUFVRixRQUFWLEVBQW9CO0FBQ2hCUixzQkFBVVcsSUFBVixDQUFlSCxRQUFmO0FBQ0g7QUFkRSxLQUFQO0FBZ0JIIiwiZmlsZSI6IjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gY3JlYXRlU3RvcmUocmVkdWNlciwgaW5pdGlhbCA9IHt9KSB7ICBcbiAgICBjb25zdCBsaXN0ZW5lcnMgPSBbXTtcbiAgICBsZXQgc3RhdGUgPSBpbml0aWFsO1xuICAgIGlmKHNlc3Npb25TdG9yYWdlLnRvZG9zKXsgXG4gICAgICAgIHN0YXRlLnRvZG9zID0gSlNPTi5wYXJzZShzZXNzaW9uU3RvcmFnZS50b2Rvcyk7IFxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBkaXNwYXRjaChjaGFuZ2UpIHtcbiAgICAgICAgICAgIHN0YXRlID0gcmVkdWNlcihzdGF0ZSwgY2hhbmdlKSB8fCBzdGF0ZTtcbiAgICAgICAgICAgIGZvcihsZXQgbGlzdGVuZXIgb2YgbGlzdGVuZXJzKSB7XG4gICAgICAgICAgICAgICAgbGlzdGVuZXIoc3RhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIGdldFN0YXRlKCkge1xuICAgICAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgICAgICB9LFxuXG4gICAgICAgIHN1YnNjcmliZShsaXN0ZW5lcikge1xuICAgICAgICAgICAgbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgICAgICB9XG4gICAgfTtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9qcy9saWIvc3RhdGUuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///3\n");

/***/ }),
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (immutable) */ __webpack_exports__[\"a\"] = render;\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__lib_feature__ = __webpack_require__(5);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_incremental_dom__ = __webpack_require__(6);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_incremental_dom___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_incremental_dom__);\n\n\n\nfunction render(el, state) {\n    __WEBPACK_IMPORTED_MODULE_1_incremental_dom___default.a.patch(document.body, Object(__WEBPACK_IMPORTED_MODULE_0__lib_feature__[\"a\" /* isEnabled */])('renderBottom') ? renderBottomTodo : rendertopTodo);\n    renderApp(state);\n}\n\nfunction renderBottomTodo() {\n    __WEBPACK_IMPORTED_MODULE_1_incremental_dom___default.a.elementOpen('div', null, ['id', 'app'], null);\n    __WEBPACK_IMPORTED_MODULE_1_incremental_dom___default.a.elementOpen('div', null, ['class', 'header'], null);\n    __WEBPACK_IMPORTED_MODULE_1_incremental_dom___default.a.text('todos');\n    __WEBPACK_IMPORTED_MODULE_1_incremental_dom___default.a.elementClose('div');\n    Object(__WEBPACK_IMPORTED_MODULE_0__lib_feature__[\"a\" /* isEnabled */])('filter') && Object(__WEBPACK_IMPORTED_MODULE_0__lib_feature__[\"a\" /* isEnabled */])('renderBottom') && Object(__WEBPACK_IMPORTED_MODULE_0__lib_feature__[\"a\" /* isEnabled */])('filterTop') && __WEBPACK_IMPORTED_MODULE_1_incremental_dom___default.a.elementOpen('div', null, ['id', 'filter'], null);\n    Object(__WEBPACK_IMPORTED_MODULE_0__lib_feature__[\"a\" /* isEnabled */])('filter') && Object(__WEBPACK_IMPORTED_MODULE_0__lib_feature__[\"a\" /* isEnabled */])('renderBottom') && Object(__WEBPACK_IMPORTED_MODULE_0__lib_feature__[\"a\" /* isEnabled */])('filterTop') && __WEBPACK_IMPORTED_MODULE_1_incremental_dom___default.a.elementClose('div');\n    __WEBPACK_IMPORTED_MODULE_1_incremental_dom___default.a.elementOpen('ul', null, ['id', 'todo', 'class', 'todo-list'], null);\n    __WEBPACK_IMPORTED_MODULE_1_incremental_dom___default.a.elementClose('ul');\n    __WEBPACK_IMPORTED_MODULE_1_incremental_dom___default.a.elementOpen('div', null, ['id', 'inputContainer'], null);\n    __WEBPACK_IMPORTED_MODULE_1_incremental_dom___default.a.elementClose('div');\n    Object(__WEBPACK_IMPORTED_MODULE_0__lib_feature__[\"a\" /* isEnabled */])('filter') && !Object(__WEBPACK_IMPORTED_MODULE_0__lib_feature__[\"a\" /* isEnabled */])('filterTop') && __WEBPACK_IMPORTED_MODULE_1_incremental_dom___default.a.elementOpen('div', null, ['id', 'filter'], null);\n    Object(__WEBPACK_IMPORTED_MODULE_0__lib_feature__[\"a\" /* isEnabled */])('filter') && !Object(__WEBPACK_IMPORTED_MODULE_0__lib_feature__[\"a\" /* isEnabled */])('filterTop') && __WEBPACK_IMPORTED_MODULE_1_incremental_dom___default.a.elementClose('div');\n    __WEBPACK_IMPORTED_MODULE_1_incremental_dom___default.a.elementClose('div');\n}\n\nfunction rendertopTodo() {\n    __WEBPACK_IMPORTED_MODULE_1_incremental_dom___default.a.elementOpen('div', null, ['id', 'app'], null);\n    __WEBPACK_IMPORTED_MODULE_1_incremental_dom___default.a.elementOpen('div', null, ['class', 'header'], null);\n    __WEBPACK_IMPORTED_MODULE_1_incremental_dom___default.a.text('todos');\n    __WEBPACK_IMPORTED_MODULE_1_incremental_dom___default.a.elementClose('div');\n    __WEBPACK_IMPORTED_MODULE_1_incremental_dom___default.a.elementOpen('div', null, ['id', 'inputContainer'], null);\n    __WEBPACK_IMPORTED_MODULE_1_incremental_dom___default.a.elementClose('div');\n    __WEBPACK_IMPORTED_MODULE_1_incremental_dom___default.a.elementOpen('ul', null, ['id', 'todo', 'class', 'todo-list'], null);\n    __WEBPACK_IMPORTED_MODULE_1_incremental_dom___default.a.elementClose('ul');\n    Object(__WEBPACK_IMPORTED_MODULE_0__lib_feature__[\"a\" /* isEnabled */])('filter') && __WEBPACK_IMPORTED_MODULE_1_incremental_dom___default.a.elementOpen('div', null, ['id', 'filter'], null);\n    Object(__WEBPACK_IMPORTED_MODULE_0__lib_feature__[\"a\" /* isEnabled */])('filter') && __WEBPACK_IMPORTED_MODULE_1_incremental_dom___default.a.elementClose('div');\n    __WEBPACK_IMPORTED_MODULE_1_incremental_dom___default.a.elementClose('div');\n}\n\nfunction renderApp(state) {\n    __WEBPACK_IMPORTED_MODULE_1_incremental_dom___default.a.patch(document.getElementById('inputContainer'), renderInput, state);\n    __WEBPACK_IMPORTED_MODULE_1_incremental_dom___default.a.patch(document.getElementById('todo'), renderTodoItem, state);\n    Object(__WEBPACK_IMPORTED_MODULE_0__lib_feature__[\"a\" /* isEnabled */])('filter') && __WEBPACK_IMPORTED_MODULE_1_incremental_dom___default.a.patch(document.getElementById('filter'), renderFilter, state);\n}\n\nfunction renderInput(state) {\n    __WEBPACK_IMPORTED_MODULE_1_incremental_dom___default.a.elementOpen('div', null, ['class', 'todo__input'], null);\n    __WEBPACK_IMPORTED_MODULE_1_incremental_dom___default.a.elementVoid('input', '', ['type', 'text', 'id', 'todoInput', 'placeholder', 'Please Add']);\n    __WEBPACK_IMPORTED_MODULE_1_incremental_dom___default.a.elementOpen('button', null, ['id', 'addTodo', 'class', 'addButton'], null);\n    __WEBPACK_IMPORTED_MODULE_1_incremental_dom___default.a.text('Add');\n    __WEBPACK_IMPORTED_MODULE_1_incremental_dom___default.a.elementClose('button');\n    __WEBPACK_IMPORTED_MODULE_1_incremental_dom___default.a.elementClose('div');\n}\n\nfunction renderTodoItem(state) {\n    state.todos.forEach(function (item) {\n        const todoClass = `todo__item todo__item--${item.done ? 'done' : 'open'}`;\n        const checked = item.done ? 'checked' : '';\n        __WEBPACK_IMPORTED_MODULE_1_incremental_dom___default.a.elementOpen('li', item.id, ['class', todoClass], null);\n        __WEBPACK_IMPORTED_MODULE_1_incremental_dom___default.a.elementVoid('input', '', ['type', 'checkbox', 'class', 'js_toggle_todo', 'data-id', item.id, item.done ? 'checked' : 'notchecked', item.done]);\n        __WEBPACK_IMPORTED_MODULE_1_incremental_dom___default.a.elementOpen('label');\n        __WEBPACK_IMPORTED_MODULE_1_incremental_dom___default.a.text(item.text);\n        __WEBPACK_IMPORTED_MODULE_1_incremental_dom___default.a.elementClose('label');\n        __WEBPACK_IMPORTED_MODULE_1_incremental_dom___default.a.elementClose('li');\n    });\n}\n\nfunction renderFilter(state) {\n    const checkFilter = !state.CheckedFilter ? 'showAll' : state.CheckedFilter;\n    const radioData = [{ id: \"showAll\", text: \"Show All\" }, { id: \"showOpen\", text: \"Show Open\" }, { id: \"showClosed\", text: \"Show Closed\" }];\n    __WEBPACK_IMPORTED_MODULE_1_incremental_dom___default.a.elementOpen('ul', null, ['class', 'radio'], null);\n    radioData.forEach(function (item) {\n        __WEBPACK_IMPORTED_MODULE_1_incremental_dom___default.a.elementOpen('li');\n        __WEBPACK_IMPORTED_MODULE_1_incremental_dom___default.a.elementVoid('input', '', ['type', 'radio', 'name', 'show', 'class', 'filter', 'id', item.id, 'value', item.id, checkFilter === item.id ? 'checked' : 'notchecked', '']);\n        __WEBPACK_IMPORTED_MODULE_1_incremental_dom___default.a.elementOpen('label', null, ['for', item.id], null);\n        __WEBPACK_IMPORTED_MODULE_1_incremental_dom___default.a.text(item.text);\n        __WEBPACK_IMPORTED_MODULE_1_incremental_dom___default.a.elementClose('label');\n        __WEBPACK_IMPORTED_MODULE_1_incremental_dom___default.a.elementClose('li');\n    });\n    __WEBPACK_IMPORTED_MODULE_1_incremental_dom___default.a.elementClose('ul');\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4\n");

/***/ }),
/* 5 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (immutable) */ __webpack_exports__[\"a\"] = isEnabled;\nfunction isEnabled(name) {\n    return window.location.hash.split('#').includes(name);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvbGliL2ZlYXR1cmUuanM/Y2Y0ZCJdLCJuYW1lcyI6WyJpc0VuYWJsZWQiLCJuYW1lIiwid2luZG93IiwibG9jYXRpb24iLCJoYXNoIiwic3BsaXQiLCJpbmNsdWRlcyJdLCJtYXBwaW5ncyI6IjtBQUFPLFNBQVNBLFNBQVQsQ0FBbUJDLElBQW5CLEVBQXlCO0FBQzVCLFdBQU9DLE9BQU9DLFFBQVAsQ0FBZ0JDLElBQWhCLENBQXFCQyxLQUFyQixDQUEyQixHQUEzQixFQUFnQ0MsUUFBaEMsQ0FBeUNMLElBQXpDLENBQVA7QUFDSCIsImZpbGUiOiI1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGlzRW5hYmxlZChuYW1lKSB7XG4gICAgcmV0dXJuIHdpbmRvdy5sb2NhdGlvbi5oYXNoLnNwbGl0KCcjJykuaW5jbHVkZXMobmFtZSk7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvbGliL2ZlYXR1cmUuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///5\n");

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(process) {\n/**\n * @license\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n\n/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A cached reference to the hasOwnProperty function.\n */\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\n/**\n * A constructor function that will create blank objects.\n * @constructor\n */\nfunction Blank() {}\n\nBlank.prototype = Object.create(null);\n\n/**\n * Used to prevent property collisions between our \"map\" and its prototype.\n * @param {!Object<string, *>} map The map to check.\n * @param {string} property The property to check.\n * @return {boolean} Whether map has property.\n */\nvar has = function (map, property) {\n  return hasOwnProperty.call(map, property);\n};\n\n/**\n * Creates an map object without a prototype.\n * @return {!Object}\n */\nvar createMap = function () {\n  return new Blank();\n};\n\n/**\n * Keeps track of information needed to perform diffs for a given DOM node.\n * @param {!string} nodeName\n * @param {?string=} key\n * @constructor\n */\nfunction NodeData(nodeName, key) {\n  /**\n   * The attributes and their values.\n   * @const {!Object<string, *>}\n   */\n  this.attrs = createMap();\n\n  /**\n   * An array of attribute name/value pairs, used for quickly diffing the\n   * incomming attributes to see if the DOM node's attributes need to be\n   * updated.\n   * @const {Array<*>}\n   */\n  this.attrsArr = [];\n\n  /**\n   * The incoming attributes for this Node, before they are updated.\n   * @const {!Object<string, *>}\n   */\n  this.newAttrs = createMap();\n\n  /**\n   * Whether or not the statics have been applied for the node yet.\n   * {boolean}\n   */\n  this.staticsApplied = false;\n\n  /**\n   * The key used to identify this node, used to preserve DOM nodes when they\n   * move within their parent.\n   * @const\n   */\n  this.key = key;\n\n  /**\n   * Keeps track of children within this node by their key.\n   * {!Object<string, !Element>}\n   */\n  this.keyMap = createMap();\n\n  /**\n   * Whether or not the keyMap is currently valid.\n   * @type {boolean}\n   */\n  this.keyMapValid = true;\n\n  /**\n   * Whether or the associated node is, or contains, a focused Element.\n   * @type {boolean}\n   */\n  this.focused = false;\n\n  /**\n   * The node name for this node.\n   * @const {string}\n   */\n  this.nodeName = nodeName;\n\n  /**\n   * @type {?string}\n   */\n  this.text = null;\n}\n\n/**\n * Initializes a NodeData object for a Node.\n *\n * @param {Node} node The node to initialize data for.\n * @param {string} nodeName The node name of node.\n * @param {?string=} key The key that identifies the node.\n * @return {!NodeData} The newly initialized data object\n */\nvar initData = function (node, nodeName, key) {\n  var data = new NodeData(nodeName, key);\n  node['__incrementalDOMData'] = data;\n  return data;\n};\n\n/**\n * Retrieves the NodeData object for a Node, creating it if necessary.\n *\n * @param {?Node} node The Node to retrieve the data for.\n * @return {!NodeData} The NodeData for this Node.\n */\nvar getData = function (node) {\n  importNode(node);\n  return node['__incrementalDOMData'];\n};\n\n/**\n * Imports node and its subtree, initializing caches.\n *\n * @param {?Node} node The Node to import.\n */\nvar importNode = function (node) {\n  if (node['__incrementalDOMData']) {\n    return;\n  }\n\n  var isElement = node instanceof Element;\n  var nodeName = isElement ? node.localName : node.nodeName;\n  var key = isElement ? node.getAttribute('key') : null;\n  var data = initData(node, nodeName, key);\n\n  if (key) {\n    getData(node.parentNode).keyMap[key] = node;\n  }\n\n  if (isElement) {\n    var attributes = node.attributes;\n    var attrs = data.attrs;\n    var newAttrs = data.newAttrs;\n    var attrsArr = data.attrsArr;\n\n    for (var i = 0; i < attributes.length; i += 1) {\n      var attr = attributes[i];\n      var name = attr.name;\n      var value = attr.value;\n\n      attrs[name] = value;\n      newAttrs[name] = undefined;\n      attrsArr.push(name);\n      attrsArr.push(value);\n    }\n  }\n\n  for (var child = node.firstChild; child; child = child.nextSibling) {\n    importNode(child);\n  }\n};\n\n/**\n * Gets the namespace to create an element (of a given tag) in.\n * @param {string} tag The tag to get the namespace for.\n * @param {?Node} parent\n * @return {?string} The namespace to create the tag in.\n */\nvar getNamespaceForTag = function (tag, parent) {\n  if (tag === 'svg') {\n    return 'http://www.w3.org/2000/svg';\n  }\n\n  if (getData(parent).nodeName === 'foreignObject') {\n    return null;\n  }\n\n  return parent.namespaceURI;\n};\n\n/**\n * Creates an Element.\n * @param {Document} doc The document with which to create the Element.\n * @param {?Node} parent\n * @param {string} tag The tag for the Element.\n * @param {?string=} key A key to identify the Element.\n * @return {!Element}\n */\nvar createElement = function (doc, parent, tag, key) {\n  var namespace = getNamespaceForTag(tag, parent);\n  var el = undefined;\n\n  if (namespace) {\n    el = doc.createElementNS(namespace, tag);\n  } else {\n    el = doc.createElement(tag);\n  }\n\n  initData(el, tag, key);\n\n  return el;\n};\n\n/**\n * Creates a Text Node.\n * @param {Document} doc The document with which to create the Element.\n * @return {!Text}\n */\nvar createText = function (doc) {\n  var node = doc.createTextNode('');\n  initData(node, '#text', null);\n  return node;\n};\n\n/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @const */\nvar notifications = {\n  /**\n   * Called after patch has compleated with any Nodes that have been created\n   * and added to the DOM.\n   * @type {?function(Array<!Node>)}\n   */\n  nodesCreated: null,\n\n  /**\n   * Called after patch has compleated with any Nodes that have been removed\n   * from the DOM.\n   * Note it's an applications responsibility to handle any childNodes.\n   * @type {?function(Array<!Node>)}\n   */\n  nodesDeleted: null\n};\n\n/**\n * Keeps track of the state of a patch.\n * @constructor\n */\nfunction Context() {\n  /**\n   * @type {(Array<!Node>|undefined)}\n   */\n  this.created = notifications.nodesCreated && [];\n\n  /**\n   * @type {(Array<!Node>|undefined)}\n   */\n  this.deleted = notifications.nodesDeleted && [];\n}\n\n/**\n * @param {!Node} node\n */\nContext.prototype.markCreated = function (node) {\n  if (this.created) {\n    this.created.push(node);\n  }\n};\n\n/**\n * @param {!Node} node\n */\nContext.prototype.markDeleted = function (node) {\n  if (this.deleted) {\n    this.deleted.push(node);\n  }\n};\n\n/**\n * Notifies about nodes that were created during the patch opearation.\n */\nContext.prototype.notifyChanges = function () {\n  if (this.created && this.created.length > 0) {\n    notifications.nodesCreated(this.created);\n  }\n\n  if (this.deleted && this.deleted.length > 0) {\n    notifications.nodesDeleted(this.deleted);\n  }\n};\n\n/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n  * Keeps track whether or not we are in an attributes declaration (after\n  * elementOpenStart, but before elementOpenEnd).\n  * @type {boolean}\n  */\nvar inAttributes = false;\n\n/**\n  * Keeps track whether or not we are in an element that should not have its\n  * children cleared.\n  * @type {boolean}\n  */\nvar inSkip = false;\n\n/**\n * Makes sure that there is a current patch context.\n * @param {string} functionName\n * @param {*} context\n */\nvar assertInPatch = function (functionName, context) {\n  if (!context) {\n    throw new Error('Cannot call ' + functionName + '() unless in patch.');\n  }\n};\n\n/**\n * Makes sure that a patch closes every node that it opened.\n * @param {?Node} openElement\n * @param {!Node|!DocumentFragment} root\n */\nvar assertNoUnclosedTags = function (openElement, root) {\n  if (openElement === root) {\n    return;\n  }\n\n  var currentElement = openElement;\n  var openTags = [];\n  while (currentElement && currentElement !== root) {\n    openTags.push(currentElement.nodeName.toLowerCase());\n    currentElement = currentElement.parentNode;\n  }\n\n  throw new Error('One or more tags were not closed:\\n' + openTags.join('\\n'));\n};\n\n/**\n * Makes sure that the caller is not where attributes are expected.\n * @param {string} functionName\n */\nvar assertNotInAttributes = function (functionName) {\n  if (inAttributes) {\n    throw new Error(functionName + '() can not be called between ' + 'elementOpenStart() and elementOpenEnd().');\n  }\n};\n\n/**\n * Makes sure that the caller is not inside an element that has declared skip.\n * @param {string} functionName\n */\nvar assertNotInSkip = function (functionName) {\n  if (inSkip) {\n    throw new Error(functionName + '() may not be called inside an element ' + 'that has called skip().');\n  }\n};\n\n/**\n * Makes sure that the caller is where attributes are expected.\n * @param {string} functionName\n */\nvar assertInAttributes = function (functionName) {\n  if (!inAttributes) {\n    throw new Error(functionName + '() can only be called after calling ' + 'elementOpenStart().');\n  }\n};\n\n/**\n * Makes sure the patch closes virtual attributes call\n */\nvar assertVirtualAttributesClosed = function () {\n  if (inAttributes) {\n    throw new Error('elementOpenEnd() must be called after calling ' + 'elementOpenStart().');\n  }\n};\n\n/**\n  * Makes sure that tags are correctly nested.\n  * @param {string} nodeName\n  * @param {string} tag\n  */\nvar assertCloseMatchesOpenTag = function (nodeName, tag) {\n  if (nodeName !== tag) {\n    throw new Error('Received a call to close \"' + tag + '\" but \"' + nodeName + '\" was open.');\n  }\n};\n\n/**\n * Makes sure that no children elements have been declared yet in the current\n * element.\n * @param {string} functionName\n * @param {?Node} previousNode\n */\nvar assertNoChildrenDeclaredYet = function (functionName, previousNode) {\n  if (previousNode !== null) {\n    throw new Error(functionName + '() must come before any child ' + 'declarations inside the current element.');\n  }\n};\n\n/**\n * Checks that a call to patchOuter actually patched the element.\n * @param {?Node} startNode The value for the currentNode when the patch\n *     started.\n * @param {?Node} currentNode The currentNode when the patch finished.\n * @param {?Node} expectedNextNode The Node that is expected to follow the\n *    currentNode after the patch;\n * @param {?Node} expectedPrevNode The Node that is expected to preceed the\n *    currentNode after the patch.\n */\nvar assertPatchElementNoExtras = function (startNode, currentNode, expectedNextNode, expectedPrevNode) {\n  var wasUpdated = currentNode.nextSibling === expectedNextNode && currentNode.previousSibling === expectedPrevNode;\n  var wasChanged = currentNode.nextSibling === startNode.nextSibling && currentNode.previousSibling === expectedPrevNode;\n  var wasRemoved = currentNode === startNode;\n\n  if (!wasUpdated && !wasChanged && !wasRemoved) {\n    throw new Error('There must be exactly one top level call corresponding ' + 'to the patched element.');\n  }\n};\n\n/**\n * Updates the state of being in an attribute declaration.\n * @param {boolean} value\n * @return {boolean} the previous value.\n */\nvar setInAttributes = function (value) {\n  var previous = inAttributes;\n  inAttributes = value;\n  return previous;\n};\n\n/**\n * Updates the state of being in a skip element.\n * @param {boolean} value\n * @return {boolean} the previous value.\n */\nvar setInSkip = function (value) {\n  var previous = inSkip;\n  inSkip = value;\n  return previous;\n};\n\n/**\n * Copyright 2016 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @param {!Node} node\n * @return {boolean} True if the node the root of a document, false otherwise.\n */\nvar isDocumentRoot = function (node) {\n  // For ShadowRoots, check if they are a DocumentFragment instead of if they\n  // are a ShadowRoot so that this can work in 'use strict' if ShadowRoots are\n  // not supported.\n  return node instanceof Document || node instanceof DocumentFragment;\n};\n\n/**\n * @param {!Node} node The node to start at, inclusive.\n * @param {?Node} root The root ancestor to get until, exclusive.\n * @return {!Array<!Node>} The ancestry of DOM nodes.\n */\nvar getAncestry = function (node, root) {\n  var ancestry = [];\n  var cur = node;\n\n  while (cur !== root) {\n    ancestry.push(cur);\n    cur = cur.parentNode;\n  }\n\n  return ancestry;\n};\n\n/**\n * @param {!Node} node\n * @return {!Node} The root node of the DOM tree that contains node.\n */\nvar getRoot = function (node) {\n  var cur = node;\n  var prev = cur;\n\n  while (cur) {\n    prev = cur;\n    cur = cur.parentNode;\n  }\n\n  return prev;\n};\n\n/**\n * @param {!Node} node The node to get the activeElement for.\n * @return {?Element} The activeElement in the Document or ShadowRoot\n *     corresponding to node, if present.\n */\nvar getActiveElement = function (node) {\n  var root = getRoot(node);\n  return isDocumentRoot(root) ? root.activeElement : null;\n};\n\n/**\n * Gets the path of nodes that contain the focused node in the same document as\n * a reference node, up until the root.\n * @param {!Node} node The reference node to get the activeElement for.\n * @param {?Node} root The root to get the focused path until.\n * @return {!Array<Node>}\n */\nvar getFocusedPath = function (node, root) {\n  var activeElement = getActiveElement(node);\n\n  if (!activeElement || !node.contains(activeElement)) {\n    return [];\n  }\n\n  return getAncestry(activeElement, root);\n};\n\n/**\n * Like insertBefore, but instead instead of moving the desired node, instead\n * moves all the other nodes after.\n * @param {?Node} parentNode\n * @param {!Node} node\n * @param {?Node} referenceNode\n */\nvar moveBefore = function (parentNode, node, referenceNode) {\n  var insertReferenceNode = node.nextSibling;\n  var cur = referenceNode;\n\n  while (cur !== node) {\n    var next = cur.nextSibling;\n    parentNode.insertBefore(cur, insertReferenceNode);\n    cur = next;\n  }\n};\n\n/** @type {?Context} */\nvar context = null;\n\n/** @type {?Node} */\nvar currentNode = null;\n\n/** @type {?Node} */\nvar currentParent = null;\n\n/** @type {?Document} */\nvar doc = null;\n\n/**\n * @param {!Array<Node>} focusPath The nodes to mark.\n * @param {boolean} focused Whether or not they are focused.\n */\nvar markFocused = function (focusPath, focused) {\n  for (var i = 0; i < focusPath.length; i += 1) {\n    getData(focusPath[i]).focused = focused;\n  }\n};\n\n/**\n * Returns a patcher function that sets up and restores a patch context,\n * running the run function with the provided data.\n * @param {function((!Element|!DocumentFragment),!function(T),T=): ?Node} run\n * @return {function((!Element|!DocumentFragment),!function(T),T=): ?Node}\n * @template T\n */\nvar patchFactory = function (run) {\n  /**\n   * TODO(moz): These annotations won't be necessary once we switch to Closure\n   * Compiler's new type inference. Remove these once the switch is done.\n   *\n   * @param {(!Element|!DocumentFragment)} node\n   * @param {!function(T)} fn\n   * @param {T=} data\n   * @return {?Node} node\n   * @template T\n   */\n  var f = function (node, fn, data) {\n    var prevContext = context;\n    var prevDoc = doc;\n    var prevCurrentNode = currentNode;\n    var prevCurrentParent = currentParent;\n    var previousInAttributes = false;\n    var previousInSkip = false;\n\n    context = new Context();\n    doc = node.ownerDocument;\n    currentParent = node.parentNode;\n\n    if (process.env.NODE_ENV !== 'production') {\n      previousInAttributes = setInAttributes(false);\n      previousInSkip = setInSkip(false);\n    }\n\n    var focusPath = getFocusedPath(node, currentParent);\n    markFocused(focusPath, true);\n    var retVal = run(node, fn, data);\n    markFocused(focusPath, false);\n\n    if (process.env.NODE_ENV !== 'production') {\n      assertVirtualAttributesClosed();\n      setInAttributes(previousInAttributes);\n      setInSkip(previousInSkip);\n    }\n\n    context.notifyChanges();\n\n    context = prevContext;\n    doc = prevDoc;\n    currentNode = prevCurrentNode;\n    currentParent = prevCurrentParent;\n\n    return retVal;\n  };\n  return f;\n};\n\n/**\n * Patches the document starting at node with the provided function. This\n * function may be called during an existing patch operation.\n * @param {!Element|!DocumentFragment} node The Element or Document\n *     to patch.\n * @param {!function(T)} fn A function containing elementOpen/elementClose/etc.\n *     calls that describe the DOM.\n * @param {T=} data An argument passed to fn to represent DOM state.\n * @return {!Node} The patched node.\n * @template T\n */\nvar patchInner = patchFactory(function (node, fn, data) {\n  currentNode = node;\n\n  enterNode();\n  fn(data);\n  exitNode();\n\n  if (process.env.NODE_ENV !== 'production') {\n    assertNoUnclosedTags(currentNode, node);\n  }\n\n  return node;\n});\n\n/**\n * Patches an Element with the the provided function. Exactly one top level\n * element call should be made corresponding to `node`.\n * @param {!Element} node The Element where the patch should start.\n * @param {!function(T)} fn A function containing elementOpen/elementClose/etc.\n *     calls that describe the DOM. This should have at most one top level\n *     element call.\n * @param {T=} data An argument passed to fn to represent DOM state.\n * @return {?Node} The node if it was updated, its replacedment or null if it\n *     was removed.\n * @template T\n */\nvar patchOuter = patchFactory(function (node, fn, data) {\n  var startNode = /** @type {!Element} */{ nextSibling: node };\n  var expectedNextNode = null;\n  var expectedPrevNode = null;\n\n  if (process.env.NODE_ENV !== 'production') {\n    expectedNextNode = node.nextSibling;\n    expectedPrevNode = node.previousSibling;\n  }\n\n  currentNode = startNode;\n  fn(data);\n\n  if (process.env.NODE_ENV !== 'production') {\n    assertPatchElementNoExtras(startNode, currentNode, expectedNextNode, expectedPrevNode);\n  }\n\n  if (node !== currentNode && node.parentNode) {\n    removeChild(currentParent, node, getData(currentParent).keyMap);\n  }\n\n  return startNode === currentNode ? null : currentNode;\n});\n\n/**\n * Checks whether or not the current node matches the specified nodeName and\n * key.\n *\n * @param {!Node} matchNode A node to match the data to.\n * @param {?string} nodeName The nodeName for this node.\n * @param {?string=} key An optional key that identifies a node.\n * @return {boolean} True if the node matches, false otherwise.\n */\nvar matches = function (matchNode, nodeName, key) {\n  var data = getData(matchNode);\n\n  // Key check is done using double equals as we want to treat a null key the\n  // same as undefined. This should be okay as the only values allowed are\n  // strings, null and undefined so the == semantics are not too weird.\n  return nodeName === data.nodeName && key == data.key;\n};\n\n/**\n * Aligns the virtual Element definition with the actual DOM, moving the\n * corresponding DOM node to the correct location or creating it if necessary.\n * @param {string} nodeName For an Element, this should be a valid tag string.\n *     For a Text, this should be #text.\n * @param {?string=} key The key used to identify this element.\n */\nvar alignWithDOM = function (nodeName, key) {\n  if (currentNode && matches(currentNode, nodeName, key)) {\n    return;\n  }\n\n  var parentData = getData(currentParent);\n  var currentNodeData = currentNode && getData(currentNode);\n  var keyMap = parentData.keyMap;\n  var node = undefined;\n\n  // Check to see if the node has moved within the parent.\n  if (key) {\n    var keyNode = keyMap[key];\n    if (keyNode) {\n      if (matches(keyNode, nodeName, key)) {\n        node = keyNode;\n      } else if (keyNode === currentNode) {\n        context.markDeleted(keyNode);\n      } else {\n        removeChild(currentParent, keyNode, keyMap);\n      }\n    }\n  }\n\n  // Create the node if it doesn't exist.\n  if (!node) {\n    if (nodeName === '#text') {\n      node = createText(doc);\n    } else {\n      node = createElement(doc, currentParent, nodeName, key);\n    }\n\n    if (key) {\n      keyMap[key] = node;\n    }\n\n    context.markCreated(node);\n  }\n\n  // Re-order the node into the right position, preserving focus if either\n  // node or currentNode are focused by making sure that they are not detached\n  // from the DOM.\n  if (getData(node).focused) {\n    // Move everything else before the node.\n    moveBefore(currentParent, node, currentNode);\n  } else if (currentNodeData && currentNodeData.key && !currentNodeData.focused) {\n    // Remove the currentNode, which can always be added back since we hold a\n    // reference through the keyMap. This prevents a large number of moves when\n    // a keyed item is removed or moved backwards in the DOM.\n    currentParent.replaceChild(node, currentNode);\n    parentData.keyMapValid = false;\n  } else {\n    currentParent.insertBefore(node, currentNode);\n  }\n\n  currentNode = node;\n};\n\n/**\n * @param {?Node} node\n * @param {?Node} child\n * @param {?Object<string, !Element>} keyMap\n */\nvar removeChild = function (node, child, keyMap) {\n  node.removeChild(child);\n  context.markDeleted( /** @type {!Node}*/child);\n\n  var key = getData(child).key;\n  if (key) {\n    delete keyMap[key];\n  }\n};\n\n/**\n * Clears out any unvisited Nodes, as the corresponding virtual element\n * functions were never called for them.\n */\nvar clearUnvisitedDOM = function () {\n  var node = currentParent;\n  var data = getData(node);\n  var keyMap = data.keyMap;\n  var keyMapValid = data.keyMapValid;\n  var child = node.lastChild;\n  var key = undefined;\n\n  if (child === currentNode && keyMapValid) {\n    return;\n  }\n\n  while (child !== currentNode) {\n    removeChild(node, child, keyMap);\n    child = node.lastChild;\n  }\n\n  // Clean the keyMap, removing any unusued keys.\n  if (!keyMapValid) {\n    for (key in keyMap) {\n      child = keyMap[key];\n      if (child.parentNode !== node) {\n        context.markDeleted(child);\n        delete keyMap[key];\n      }\n    }\n\n    data.keyMapValid = true;\n  }\n};\n\n/**\n * Changes to the first child of the current node.\n */\nvar enterNode = function () {\n  currentParent = currentNode;\n  currentNode = null;\n};\n\n/**\n * @return {?Node} The next Node to be patched.\n */\nvar getNextNode = function () {\n  if (currentNode) {\n    return currentNode.nextSibling;\n  } else {\n    return currentParent.firstChild;\n  }\n};\n\n/**\n * Changes to the next sibling of the current node.\n */\nvar nextNode = function () {\n  currentNode = getNextNode();\n};\n\n/**\n * Changes to the parent of the current node, removing any unvisited children.\n */\nvar exitNode = function () {\n  clearUnvisitedDOM();\n\n  currentNode = currentParent;\n  currentParent = currentParent.parentNode;\n};\n\n/**\n * Makes sure that the current node is an Element with a matching tagName and\n * key.\n *\n * @param {string} tag The element's tag.\n * @param {?string=} key The key used to identify this element. This can be an\n *     empty string, but performance may be better if a unique value is used\n *     when iterating over an array of items.\n * @return {!Element} The corresponding Element.\n */\nvar coreElementOpen = function (tag, key) {\n  nextNode();\n  alignWithDOM(tag, key);\n  enterNode();\n  return (/** @type {!Element} */currentParent\n  );\n};\n\n/**\n * Closes the currently open Element, removing any unvisited children if\n * necessary.\n *\n * @return {!Element} The corresponding Element.\n */\nvar coreElementClose = function () {\n  if (process.env.NODE_ENV !== 'production') {\n    setInSkip(false);\n  }\n\n  exitNode();\n  return (/** @type {!Element} */currentNode\n  );\n};\n\n/**\n * Makes sure the current node is a Text node and creates a Text node if it is\n * not.\n *\n * @return {!Text} The corresponding Text Node.\n */\nvar coreText = function () {\n  nextNode();\n  alignWithDOM('#text', null);\n  return (/** @type {!Text} */currentNode\n  );\n};\n\n/**\n * Gets the current Element being patched.\n * @return {!Element}\n */\nvar currentElement = function () {\n  if (process.env.NODE_ENV !== 'production') {\n    assertInPatch('currentElement', context);\n    assertNotInAttributes('currentElement');\n  }\n  return (/** @type {!Element} */currentParent\n  );\n};\n\n/**\n * @return {Node} The Node that will be evaluated for the next instruction.\n */\nvar currentPointer = function () {\n  if (process.env.NODE_ENV !== 'production') {\n    assertInPatch('currentPointer', context);\n    assertNotInAttributes('currentPointer');\n  }\n  return getNextNode();\n};\n\n/**\n * Skips the children in a subtree, allowing an Element to be closed without\n * clearing out the children.\n */\nvar skip = function () {\n  if (process.env.NODE_ENV !== 'production') {\n    assertNoChildrenDeclaredYet('skip', currentNode);\n    setInSkip(true);\n  }\n  currentNode = currentParent.lastChild;\n};\n\n/**\n * Skips the next Node to be patched, moving the pointer forward to the next\n * sibling of the current pointer.\n */\nvar skipNode = nextNode;\n\n/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @const */\nvar symbols = {\n  default: '__default'\n};\n\n/**\n * @param {string} name\n * @return {string|undefined} The namespace to use for the attribute.\n */\nvar getNamespace = function (name) {\n  if (name.lastIndexOf('xml:', 0) === 0) {\n    return 'http://www.w3.org/XML/1998/namespace';\n  }\n\n  if (name.lastIndexOf('xlink:', 0) === 0) {\n    return 'http://www.w3.org/1999/xlink';\n  }\n};\n\n/**\n * Applies an attribute or property to a given Element. If the value is null\n * or undefined, it is removed from the Element. Otherwise, the value is set\n * as an attribute.\n * @param {!Element} el\n * @param {string} name The attribute's name.\n * @param {?(boolean|number|string)=} value The attribute's value.\n */\nvar applyAttr = function (el, name, value) {\n  if (value == null) {\n    el.removeAttribute(name);\n  } else {\n    var attrNS = getNamespace(name);\n    if (attrNS) {\n      el.setAttributeNS(attrNS, name, value);\n    } else {\n      el.setAttribute(name, value);\n    }\n  }\n};\n\n/**\n * Applies a property to a given Element.\n * @param {!Element} el\n * @param {string} name The property's name.\n * @param {*} value The property's value.\n */\nvar applyProp = function (el, name, value) {\n  el[name] = value;\n};\n\n/**\n * Applies a value to a style declaration. Supports CSS custom properties by\n * setting properties containing a dash using CSSStyleDeclaration.setProperty.\n * @param {CSSStyleDeclaration} style\n * @param {!string} prop\n * @param {*} value\n */\nvar setStyleValue = function (style, prop, value) {\n  if (prop.indexOf('-') >= 0) {\n    style.setProperty(prop, /** @type {string} */value);\n  } else {\n    style[prop] = value;\n  }\n};\n\n/**\n * Applies a style to an Element. No vendor prefix expansion is done for\n * property names/values.\n * @param {!Element} el\n * @param {string} name The attribute's name.\n * @param {*} style The style to set. Either a string of css or an object\n *     containing property-value pairs.\n */\nvar applyStyle = function (el, name, style) {\n  if (typeof style === 'string') {\n    el.style.cssText = style;\n  } else {\n    el.style.cssText = '';\n    var elStyle = el.style;\n    var obj = /** @type {!Object<string,string>} */style;\n\n    for (var prop in obj) {\n      if (has(obj, prop)) {\n        setStyleValue(elStyle, prop, obj[prop]);\n      }\n    }\n  }\n};\n\n/**\n * Updates a single attribute on an Element.\n * @param {!Element} el\n * @param {string} name The attribute's name.\n * @param {*} value The attribute's value. If the value is an object or\n *     function it is set on the Element, otherwise, it is set as an HTML\n *     attribute.\n */\nvar applyAttributeTyped = function (el, name, value) {\n  var type = typeof value;\n\n  if (type === 'object' || type === 'function') {\n    applyProp(el, name, value);\n  } else {\n    applyAttr(el, name, /** @type {?(boolean|number|string)} */value);\n  }\n};\n\n/**\n * Calls the appropriate attribute mutator for this attribute.\n * @param {!Element} el\n * @param {string} name The attribute's name.\n * @param {*} value The attribute's value.\n */\nvar updateAttribute = function (el, name, value) {\n  var data = getData(el);\n  var attrs = data.attrs;\n\n  if (attrs[name] === value) {\n    return;\n  }\n\n  var mutator = attributes[name] || attributes[symbols.default];\n  mutator(el, name, value);\n\n  attrs[name] = value;\n};\n\n/**\n * A publicly mutable object to provide custom mutators for attributes.\n * @const {!Object<string, function(!Element, string, *)>}\n */\nvar attributes = createMap();\n\n// Special generic mutator that's called for any attribute that does not\n// have a specific mutator.\nattributes[symbols.default] = applyAttributeTyped;\n\nattributes['style'] = applyStyle;\n\n/**\n * The offset in the virtual element declaration where the attributes are\n * specified.\n * @const\n */\nvar ATTRIBUTES_OFFSET = 3;\n\n/**\n * Builds an array of arguments for use with elementOpenStart, attr and\n * elementOpenEnd.\n * @const {Array<*>}\n */\nvar argsBuilder = [];\n\n/**\n * @param {string} tag The element's tag.\n * @param {?string=} key The key used to identify this element. This can be an\n *     empty string, but performance may be better if a unique value is used\n *     when iterating over an array of items.\n * @param {?Array<*>=} statics An array of attribute name/value pairs of the\n *     static attributes for the Element. These will only be set once when the\n *     Element is created.\n * @param {...*} var_args, Attribute name/value pairs of the dynamic attributes\n *     for the Element.\n * @return {!Element} The corresponding Element.\n */\nvar elementOpen = function (tag, key, statics, var_args) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertNotInAttributes('elementOpen');\n    assertNotInSkip('elementOpen');\n  }\n\n  var node = coreElementOpen(tag, key);\n  var data = getData(node);\n\n  if (!data.staticsApplied) {\n    if (statics) {\n      for (var _i = 0; _i < statics.length; _i += 2) {\n        var name = /** @type {string} */statics[_i];\n        var value = statics[_i + 1];\n        updateAttribute(node, name, value);\n      }\n    }\n    // Down the road, we may want to keep track of the statics array to use it\n    // as an additional signal about whether a node matches or not. For now,\n    // just use a marker so that we do not reapply statics.\n    data.staticsApplied = true;\n  }\n\n  /*\n   * Checks to see if one or more attributes have changed for a given Element.\n   * When no attributes have changed, this is much faster than checking each\n   * individual argument. When attributes have changed, the overhead of this is\n   * minimal.\n   */\n  var attrsArr = data.attrsArr;\n  var newAttrs = data.newAttrs;\n  var isNew = !attrsArr.length;\n  var i = ATTRIBUTES_OFFSET;\n  var j = 0;\n\n  for (; i < arguments.length; i += 2, j += 2) {\n    var _attr = arguments[i];\n    if (isNew) {\n      attrsArr[j] = _attr;\n      newAttrs[_attr] = undefined;\n    } else if (attrsArr[j] !== _attr) {\n      break;\n    }\n\n    var value = arguments[i + 1];\n    if (isNew || attrsArr[j + 1] !== value) {\n      attrsArr[j + 1] = value;\n      updateAttribute(node, _attr, value);\n    }\n  }\n\n  if (i < arguments.length || j < attrsArr.length) {\n    for (; i < arguments.length; i += 1, j += 1) {\n      attrsArr[j] = arguments[i];\n    }\n\n    if (j < attrsArr.length) {\n      attrsArr.length = j;\n    }\n\n    /*\n     * Actually perform the attribute update.\n     */\n    for (i = 0; i < attrsArr.length; i += 2) {\n      var name = /** @type {string} */attrsArr[i];\n      var value = attrsArr[i + 1];\n      newAttrs[name] = value;\n    }\n\n    for (var _attr2 in newAttrs) {\n      updateAttribute(node, _attr2, newAttrs[_attr2]);\n      newAttrs[_attr2] = undefined;\n    }\n  }\n\n  return node;\n};\n\n/**\n * Declares a virtual Element at the current location in the document. This\n * corresponds to an opening tag and a elementClose tag is required. This is\n * like elementOpen, but the attributes are defined using the attr function\n * rather than being passed as arguments. Must be folllowed by 0 or more calls\n * to attr, then a call to elementOpenEnd.\n * @param {string} tag The element's tag.\n * @param {?string=} key The key used to identify this element. This can be an\n *     empty string, but performance may be better if a unique value is used\n *     when iterating over an array of items.\n * @param {?Array<*>=} statics An array of attribute name/value pairs of the\n *     static attributes for the Element. These will only be set once when the\n *     Element is created.\n */\nvar elementOpenStart = function (tag, key, statics) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertNotInAttributes('elementOpenStart');\n    setInAttributes(true);\n  }\n\n  argsBuilder[0] = tag;\n  argsBuilder[1] = key;\n  argsBuilder[2] = statics;\n};\n\n/***\n * Defines a virtual attribute at this point of the DOM. This is only valid\n * when called between elementOpenStart and elementOpenEnd.\n *\n * @param {string} name\n * @param {*} value\n */\nvar attr = function (name, value) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertInAttributes('attr');\n  }\n\n  argsBuilder.push(name);\n  argsBuilder.push(value);\n};\n\n/**\n * Closes an open tag started with elementOpenStart.\n * @return {!Element} The corresponding Element.\n */\nvar elementOpenEnd = function () {\n  if (process.env.NODE_ENV !== 'production') {\n    assertInAttributes('elementOpenEnd');\n    setInAttributes(false);\n  }\n\n  var node = elementOpen.apply(null, argsBuilder);\n  argsBuilder.length = 0;\n  return node;\n};\n\n/**\n * Closes an open virtual Element.\n *\n * @param {string} tag The element's tag.\n * @return {!Element} The corresponding Element.\n */\nvar elementClose = function (tag) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertNotInAttributes('elementClose');\n  }\n\n  var node = coreElementClose();\n\n  if (process.env.NODE_ENV !== 'production') {\n    assertCloseMatchesOpenTag(getData(node).nodeName, tag);\n  }\n\n  return node;\n};\n\n/**\n * Declares a virtual Element at the current location in the document that has\n * no children.\n * @param {string} tag The element's tag.\n * @param {?string=} key The key used to identify this element. This can be an\n *     empty string, but performance may be better if a unique value is used\n *     when iterating over an array of items.\n * @param {?Array<*>=} statics An array of attribute name/value pairs of the\n *     static attributes for the Element. These will only be set once when the\n *     Element is created.\n * @param {...*} var_args Attribute name/value pairs of the dynamic attributes\n *     for the Element.\n * @return {!Element} The corresponding Element.\n */\nvar elementVoid = function (tag, key, statics, var_args) {\n  elementOpen.apply(null, arguments);\n  return elementClose(tag);\n};\n\n/**\n * Declares a virtual Text at this point in the document.\n *\n * @param {string|number|boolean} value The value of the Text.\n * @param {...(function((string|number|boolean)):string)} var_args\n *     Functions to format the value which are called only when the value has\n *     changed.\n * @return {!Text} The corresponding text node.\n */\nvar text = function (value, var_args) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertNotInAttributes('text');\n    assertNotInSkip('text');\n  }\n\n  var node = coreText();\n  var data = getData(node);\n\n  if (data.text !== value) {\n    data.text = /** @type {string} */value;\n\n    var formatted = value;\n    for (var i = 1; i < arguments.length; i += 1) {\n      /*\n       * Call the formatter function directly to prevent leaking arguments.\n       * https://github.com/google/incremental-dom/pull/204#issuecomment-178223574\n       */\n      var fn = arguments[i];\n      formatted = fn(formatted);\n    }\n\n    node.data = formatted;\n  }\n\n  return node;\n};\n\nexports.patch = patchInner;\nexports.patchInner = patchInner;\nexports.patchOuter = patchOuter;\nexports.currentElement = currentElement;\nexports.currentPointer = currentPointer;\nexports.skip = skip;\nexports.skipNode = skipNode;\nexports.elementVoid = elementVoid;\nexports.elementOpenStart = elementOpenStart;\nexports.elementOpenEnd = elementOpenEnd;\nexports.elementOpen = elementOpen;\nexports.elementClose = elementClose;\nexports.text = text;\nexports.attr = attr;\nexports.symbols = symbols;\nexports.attributes = attributes;\nexports.applyAttr = applyAttr;\nexports.applyProp = applyProp;\nexports.notifications = notifications;\nexports.importNode = importNode;\n\n//# sourceMappingURL=incremental-dom-cjs.js.map\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6\n");

/***/ }),
/* 7 */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7\n");

/***/ }),
/* 8 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (immutable) */ __webpack_exports__[\"a\"] = registerEventHandlers;\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__state__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__lib_events__ = __webpack_require__(9);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__actions__ = __webpack_require__(10);\n\n\n\n\nfunction registerEventHandlers() {\n    Object(__WEBPACK_IMPORTED_MODULE_1__lib_events__[\"a\" /* listen */])('click', '#addTodo', event => {\n        const todoInput = document.getElementById('todoInput');\n        if (todoInput.value) {\n            __WEBPACK_IMPORTED_MODULE_0__state__[\"a\" /* todos */].dispatch(Object(__WEBPACK_IMPORTED_MODULE_2__actions__[\"b\" /* addTodo */])(todoInput.value));\n        }\n        event.stopPropagation();\n    });\n\n    Object(__WEBPACK_IMPORTED_MODULE_1__lib_events__[\"a\" /* listen */])('change', '.filter', event => {\n        const value = event.target.getAttribute('value');\n        __WEBPACK_IMPORTED_MODULE_0__state__[\"a\" /* todos */].dispatch(Object(__WEBPACK_IMPORTED_MODULE_2__actions__[\"a\" /* addFilter */])(value));\n    });\n\n    Object(__WEBPACK_IMPORTED_MODULE_1__lib_events__[\"a\" /* listen */])('click', '.js_toggle_todo', event => {\n        const id = Number.parseInt(event.target.getAttribute('data-id'), 10);\n        __WEBPACK_IMPORTED_MODULE_0__state__[\"a\" /* todos */].dispatch(Object(__WEBPACK_IMPORTED_MODULE_2__actions__[\"c\" /* toggleTodoState */])(id));\n    });\n    Object(__WEBPACK_IMPORTED_MODULE_1__lib_events__[\"a\" /* listen */])(\"keyup\", '#todoInput', event => {\n        event.preventDefault();\n        if (event.keyCode == 13) {\n            document.getElementById(\"addTodo\").click();\n        }\n        document.getElementById(\"todoInput\").focus();\n    });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvZXZlbnRzLmpzPzk2M2YiXSwibmFtZXMiOlsicmVnaXN0ZXJFdmVudEhhbmRsZXJzIiwibGlzdGVuIiwiZXZlbnQiLCJ0b2RvSW5wdXQiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwidmFsdWUiLCJ0b2RvcyIsImRpc3BhdGNoIiwiYWRkVG9kbyIsInN0b3BQcm9wYWdhdGlvbiIsInRhcmdldCIsImdldEF0dHJpYnV0ZSIsImFkZEZpbHRlciIsImlkIiwiTnVtYmVyIiwicGFyc2VJbnQiLCJ0b2dnbGVUb2RvU3RhdGUiLCJwcmV2ZW50RGVmYXVsdCIsImtleUNvZGUiLCJjbGljayIsImZvY3VzIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBOztBQUVPLFNBQVNBLHFCQUFULEdBQWlDO0FBQ3BDQyxJQUFBLG1FQUFBQSxDQUFPLE9BQVAsRUFBZ0IsVUFBaEIsRUFBNEJDLFNBQVM7QUFDakMsY0FBTUMsWUFBWUMsU0FBU0MsY0FBVCxDQUF3QixXQUF4QixDQUFsQjtBQUNBLFlBQUlGLFVBQVVHLEtBQWQsRUFBcUI7QUFDakJDLFlBQUEscURBQUFBLENBQU1DLFFBQU4sQ0FBZSxpRUFBQUMsQ0FBUU4sVUFBVUcsS0FBbEIsQ0FBZjtBQUNIO0FBQ0RKLGNBQU1RLGVBQU47QUFDSCxLQU5EOztBQVFBVCxJQUFBLG1FQUFBQSxDQUFPLFFBQVAsRUFBaUIsU0FBakIsRUFBNEJDLFNBQVM7QUFDakMsY0FBTUksUUFBUUosTUFBTVMsTUFBTixDQUFhQyxZQUFiLENBQTBCLE9BQTFCLENBQWQ7QUFDQUwsUUFBQSxxREFBQUEsQ0FBTUMsUUFBTixDQUFlLG1FQUFBSyxDQUFVUCxLQUFWLENBQWY7QUFDSCxLQUhEOztBQUtBTCxJQUFBLG1FQUFBQSxDQUFPLE9BQVAsRUFBZ0IsaUJBQWhCLEVBQW1DQyxTQUFTO0FBQ3hDLGNBQU1ZLEtBQUtDLE9BQU9DLFFBQVAsQ0FBZ0JkLE1BQU1TLE1BQU4sQ0FBYUMsWUFBYixDQUEwQixTQUExQixDQUFoQixFQUFzRCxFQUF0RCxDQUFYO0FBQ0FMLFFBQUEscURBQUFBLENBQU1DLFFBQU4sQ0FBZSx5RUFBQVMsQ0FBZ0JILEVBQWhCLENBQWY7QUFDSCxLQUhEO0FBSUFiLElBQUEsbUVBQUFBLENBQU8sT0FBUCxFQUFnQixZQUFoQixFQUE4QkMsU0FBUztBQUNuQ0EsY0FBTWdCLGNBQU47QUFDQSxZQUFJaEIsTUFBTWlCLE9BQU4sSUFBaUIsRUFBckIsRUFBeUI7QUFDckJmLHFCQUFTQyxjQUFULENBQXdCLFNBQXhCLEVBQW1DZSxLQUFuQztBQUNIO0FBQ0RoQixpQkFBU0MsY0FBVCxDQUF3QixXQUF4QixFQUFxQ2dCLEtBQXJDO0FBQ0gsS0FORDtBQU9IIiwiZmlsZSI6IjguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB0b2RvcyB9IGZyb20gJy4vc3RhdGUnO1xuaW1wb3J0IHsgbGlzdGVuIH0gZnJvbSAnLi9saWIvZXZlbnRzJztcbmltcG9ydCB7IGFkZFRvZG8sIHRvZ2dsZVRvZG9TdGF0ZSwgYWRkRmlsdGVyIH0gZnJvbSAnLi9hY3Rpb25zJztcblxuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyRXZlbnRIYW5kbGVycygpIHtcbiAgICBsaXN0ZW4oJ2NsaWNrJywgJyNhZGRUb2RvJywgZXZlbnQgPT4ge1xuICAgICAgICBjb25zdCB0b2RvSW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndG9kb0lucHV0Jyk7XG4gICAgICAgIGlmICh0b2RvSW5wdXQudmFsdWUpIHtcbiAgICAgICAgICAgIHRvZG9zLmRpc3BhdGNoKGFkZFRvZG8odG9kb0lucHV0LnZhbHVlKSk7XG4gICAgICAgIH1cbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfSk7XG5cbiAgICBsaXN0ZW4oJ2NoYW5nZScsICcuZmlsdGVyJywgZXZlbnQgPT4ge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGV2ZW50LnRhcmdldC5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJyk7XG4gICAgICAgIHRvZG9zLmRpc3BhdGNoKGFkZEZpbHRlcih2YWx1ZSkpO1xuICAgIH0pO1xuXG4gICAgbGlzdGVuKCdjbGljaycsICcuanNfdG9nZ2xlX3RvZG8nLCBldmVudCA9PiB7XG4gICAgICAgIGNvbnN0IGlkID0gTnVtYmVyLnBhcnNlSW50KGV2ZW50LnRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaWQnKSwgMTApO1xuICAgICAgICB0b2Rvcy5kaXNwYXRjaCh0b2dnbGVUb2RvU3RhdGUoaWQpKTtcbiAgICB9KTtcbiAgICBsaXN0ZW4oXCJrZXl1cFwiLCAnI3RvZG9JbnB1dCcsIGV2ZW50ID0+IHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgaWYgKGV2ZW50LmtleUNvZGUgPT0gMTMpIHtcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYWRkVG9kb1wiKS5jbGljaygpO1xuICAgICAgICB9XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidG9kb0lucHV0XCIpLmZvY3VzKCk7XG4gICAgfSk7XG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL2V2ZW50cy5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///8\n");

/***/ }),
/* 9 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (immutable) */ __webpack_exports__[\"a\"] = listen;\nfunction listen(eventName, selector, handler) {\n    document.body.addEventListener(eventName, event => {\n        if (event.target.matches(selector)) {\n            return handler(event);\n        }\n    });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvbGliL2V2ZW50cy5qcz84NWQ5Il0sIm5hbWVzIjpbImxpc3RlbiIsImV2ZW50TmFtZSIsInNlbGVjdG9yIiwiaGFuZGxlciIsImRvY3VtZW50IiwiYm9keSIsImFkZEV2ZW50TGlzdGVuZXIiLCJldmVudCIsInRhcmdldCIsIm1hdGNoZXMiXSwibWFwcGluZ3MiOiI7QUFBTyxTQUFTQSxNQUFULENBQWdCQyxTQUFoQixFQUEyQkMsUUFBM0IsRUFBcUNDLE9BQXJDLEVBQThDO0FBQ2pEQyxhQUFTQyxJQUFULENBQWNDLGdCQUFkLENBQStCTCxTQUEvQixFQUEwQ00sU0FBUztBQUMvQyxZQUFHQSxNQUFNQyxNQUFOLENBQWFDLE9BQWIsQ0FBcUJQLFFBQXJCLENBQUgsRUFBbUM7QUFDL0IsbUJBQU9DLFFBQVFJLEtBQVIsQ0FBUDtBQUNIO0FBQ0osS0FKRDtBQUtIIiwiZmlsZSI6IjkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gbGlzdGVuKGV2ZW50TmFtZSwgc2VsZWN0b3IsIGhhbmRsZXIpIHtcbiAgICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBldmVudCA9PiB7XG4gICAgICAgIGlmKGV2ZW50LnRhcmdldC5tYXRjaGVzKHNlbGVjdG9yKSkge1xuICAgICAgICAgICAgcmV0dXJuIGhhbmRsZXIoZXZlbnQpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvbGliL2V2ZW50cy5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///9\n");

/***/ }),
/* 10 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (immutable) */ __webpack_exports__[\"c\"] = toggleTodoState;\n/* harmony export (immutable) */ __webpack_exports__[\"b\"] = addTodo;\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = addFilter;\n/**\n * Created by pgotthardt on 14/01/16.\n */\nfunction toggleTodoState(id) {\n    return {\n        type: 'TODO_TOGGLE_DONE',\n        id\n    };\n}\n\nfunction addTodo(text) {\n    debugger;\n    return {\n        type: 'ADD_TODO',\n        text\n    };\n}\nfunction addFilter(text) {\n    return {\n        type: 'ADD_FILTER',\n        text\n    };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvYWN0aW9ucy5qcz82MjYxIl0sIm5hbWVzIjpbInRvZ2dsZVRvZG9TdGF0ZSIsImlkIiwidHlwZSIsImFkZFRvZG8iLCJ0ZXh0IiwiYWRkRmlsdGVyIl0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQUE7OztBQUdPLFNBQVNBLGVBQVQsQ0FBeUJDLEVBQXpCLEVBQTZCO0FBQ2hDLFdBQU87QUFDSEMsY0FBTSxrQkFESDtBQUVIRDtBQUZHLEtBQVA7QUFJSDs7QUFFTSxTQUFTRSxPQUFULENBQWlCQyxJQUFqQixFQUF1QjtBQUM3QjtBQUNHLFdBQU87QUFDSEYsY0FBTSxVQURIO0FBRUhFO0FBRkcsS0FBUDtBQUlIO0FBQ00sU0FBU0MsU0FBVCxDQUFtQkQsSUFBbkIsRUFBeUI7QUFDNUIsV0FBTztBQUNIRixjQUFNLFlBREg7QUFFSEU7QUFGRyxLQUFQO0FBSUgiLCJmaWxlIjoiMTAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENyZWF0ZWQgYnkgcGdvdHRoYXJkdCBvbiAxNC8wMS8xNi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvZ2dsZVRvZG9TdGF0ZShpZCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICdUT0RPX1RPR0dMRV9ET05FJyxcbiAgICAgICAgaWRcbiAgICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkVG9kbyh0ZXh0KSB7XG5cdGRlYnVnZ2VyO1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICdBRERfVE9ETycsXG4gICAgICAgIHRleHRcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gYWRkRmlsdGVyKHRleHQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiAnQUREX0ZJTFRFUicsXG4gICAgICAgIHRleHRcbiAgICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvYWN0aW9ucy5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///10\n");

/***/ })
/******/ ]);